/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOVE:  "move">
		| 	<TURNRIGHT: "turnright">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  <POP: "Pop" >
		| < DEFVAR: "defvar">
		|  <EQUALS: "=" >
		|  <TURN: "turn" >
		|  <FACE: "face" >
		|  <MOVE_DIR: "move-dir" >
		|  <RUN_DIRS: "run-dirs" >
		|  <MOVE_FACE: "move-face" >
		|  <IF: "if" >
		|  <LOOP: "loop" >
		|  <REPEAT: "repeat" >
		|  <DEFUN: "defun" >
		|  <FACING_P: "facing-p" >
		|  <CAN_PUT: "can-put-p" >
		|  <CAN_PICK: "can-pick-p" >
		|  <CAN_MOVE: "can-move-p" >
		|  <NOT: "not" >
		| < PASS:"skip">
		|  <OP: "(" >
		|  <CP: ")" >
	
		

}

TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}

TOKEN:
{
  	
  	< LETRA: ["a"-"z","A"-"Z"]>
 	| <DIGITO: ["0"-"9"] >
 	| < NAME: (< LETRA >)(< LETRA >|< DIGITO >)*>
 	//| < LETRA: (< letra >)(< letra >|< digito >)*>
}

TOKEN : /* PARAMETROS */
{
		<BALLOONS:  "balloons" >
		|	<CHIPS:     "chips"  >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <AROUND: "around" >
		|  <BACK: "back" >
		|  <FRONT: "front" >
		|  <NORTH: "north" >
		|  <SOUTH: "south" >
		|  <WEST: "west" >
		|  <EAST: "east" >

}


void comandos(): { }
{
   <PUT> <OP> ":" (<CHIPS>|<BALLOONS>) <NUMERO> <CP>
|  <PICK><OP> ":" (<CHIPS>|<BALLOONS>) <NUMERO> <CP>
|  <MOVE><OP><NUMERO><CP>
|  <TURNRIGHT><OP><CP>
|  <POP><OP><NUMERO> <CP>
}




  //|<DEFVAR>|<EQUALS>|<PUT>|<PICK>|<MOVE_DIR>|<RUN_DIRS>|<MOVE_FACE>)



	int numero() throws Error:
	{
	  
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	



void instructions():
{
 		int x = 0;
		salida=new String();
		String[] variables= new String[10];
		int[] valorvars= new int[10];
 }
{
  	<OP>
	(
   		<EQUALS>< LETRA >(< LETRA >|< DIGITO >)*<NUMERO> //PUEDO PONER TOKEN DINAMICO ASI?
		| <MOVE>" " (<NUMERO>|checkNum(variables, valorvars)) //{world.moveForward(x);salida = "Command: Moveforward ";}
		| <TURN>":"(<LEFT>|<AROUND>|<RIGHT>) //{ world.moveHorizontally}
		| <FACE>":"(<SOUTH>|<WEST>|<EAST>|<NORTH>)
		| <PUT>":"(<BALLOONS>|<CHIPS>)(<NUMERO>|"VARIABLE?")
		| <PICK>":"(<BALLOONS>|<CHIPS>)(<NUMERO>|"VARIABLE?")
		| <MOVE_DIR>(<NUMERO>|"VARIABLE?")(<FRONT>|<RIGHT>|<LEFT>|<BACK>)
		| <RUN_DIRS>(<FRONT>|<RIGHT>|<LEFT>|<BACK>)+ //FALTA QUE VUELVA A POSCICION ORIGINAL
		| <MOVE_FACE>(<NUMERO>|"VARIABLE?")(<SOUTH>|<WEST>|<EAST>|<NORTH>)
		| < DEFVAR> " " declararVariable(variables, valorvars) 
	)
	<CP>
}

int checkNum(String[] variables, int[] valorvars) :
{
  int rta = -57;
  int i = 0;
}
{
  < NAME>
  {
  
  	for(i=0; i<variables.length; i++)
  	{
    	if(variables[i].equals(token.image))
    	{
    	  rta= valorvars[i];

    	}
  	}
  	if(rta == -57)
  	{
  	  throw new Error("ERROR: NO EXISTE LA VARIABLE");

  	}
  	return rta;
  }
}


boolean command(StringBuffer sistema) :
	{	
		
		
		
	}
	
	{
		instructions() 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}


	void declararVariable(String[] variables, int[] valorvars) :
	{
	  String nombre = "";
	  int total = 1;
	  int pos = 33;
	  int j = 0;
	  int k = 0;
	}
	{
	  < NAME>
	  {
	    try 
			{
			  	if(!variables[variables.length].equals(null))
			  	{
			  	  pos = 1;
			  	  String[] nuevaria= new String[variables.length+100];
			  	  for(j=0; j<variables.length; j++)
			  	  {
			  	    nuevaria[j] = variables[j];
			  	  }
			  	  variables[j] = token.image;

			  	}
			  	
			  	for(k=0; k<variables.length; k++)
			  	{
			  	  if(variables[k].equals(null))
			  	  {
			  	    nombre = token.image;
					variables[k]= nombre;
					pos = k;
			  	  }

			  	}
				nombre = token.image;
				variables[1]= nombre;
				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}

	  }
	  " "
	  <NUMERO>
		{
			try 
			{
			  if(pos!=33)
			  {
			    total = Integer.parseInt(token.image);
				valorvars[pos]=total;

			  }

				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			
		}
	}

	
	/*
	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	