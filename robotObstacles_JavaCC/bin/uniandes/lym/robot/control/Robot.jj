/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.awt.Point;
import java.util.Collections;
//import control.Interpreter;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private RobotWorld world2;
	//private Interpreter recursividad = new Interpreter();
	private ArrayList<String> variables = new ArrayList<String>(); 
	private ArrayList<Integer> valorvars = new ArrayList<Integer>();
	private ArrayList<String> tempnombres = new ArrayList<String>();
	private ArrayList<Integer> tempvalores = new ArrayList<Integer>();
	private ArrayList<Integer> dirborrar = new ArrayList<Integer>();
	private ArrayList<Integer> dirbordos = new ArrayList<Integer>();
	private ArrayList<String> blockfuns = new ArrayList<String>();
	private ArrayList<String> nombrefuns = new ArrayList<String>();
	private ArrayList<String> paramfuns = new ArrayList<String>();
	private ArrayList<String> tempnomdos = new ArrayList<String>();
	private String bloqueuno = "";
	private String bloquedos = "";
	private String blouno = "";
	private String blodos = "";
	private String elreturn = "";
	private String backup = "";
	private String acumuresto = "";
	private String codeloop = "";
	private String condiloop = "";
	private String acumuloop = "";
	private String armando = "";
	private String paraloop = "???";
	private boolean estoyenloop = false;
	
	private int cuentaif = -1;
	private boolean pruebaif = false;
	void setWorld(RobotWorldDec w) {
		world = (RobotWorldDec) w;	
	}
	/*void setWorld2(RobotWorld w2) {
		world2 = (RobotWorld) w2;	
	}*/
	

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOVE:  "move">
		| 	<TURNRIGHT: "turnright">
		| 	<PUT: "put">
		| 	<PICK: "pick">
		| < DEFVAR: "defvar">
		|  <EQUALS: "=" >
		|  <TURN: "turn" >
		|  <FACE: "face" >
		|  <MOVE_DIR: "move-dir" >
		|  <RUN_DIRS: "run-dirs" >
		|  <MOVE_FACE: "move-face" >
		|  <IF: "if" >
		|  <LOOP: "loop" >
		|  <REPEAT: "repeat" >
		|  <DEFUN: "defun" >
		|  <FACING_P: "facing-p" >
		|  <CAN_PUT_P: "can-put-p" >
		|  <CAN_PICK_P: "can-pick-p" >
		|  <CAN_MOVE_P: "can-move-p" >
		|  <NOT: "not" >
		|  <OP: "(" >
		|  <CP: ")" >
		|  <RESETVAR: "!!!" >
		|  <PARALOOP: "???" >
		| < SALTAR: "skip" >
		
	
		

}
TOKEN : /* PARAMETROS */
{
		<BALLOONS:  "balloons" >
		|	<CHIPS:     "chips"  >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <AROUND: "around" >
		|  <BACK: "back" >
		|  <FRONT: "front" >
		|  <NORTH: "north" >
		|  <SOUTH: "south" >
		|  <WEST: "west" >
		|  <EAST: "east" >

}

TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


TOKEN:
{
  	
  	< LETRA: ["a"-"z","A"-"Z"]>
 	| <DIGITO: ["0"-"9"] >
 	//| < NAME: (< LETRA >)(< LETRA >|< DIGITO >)*>
 	//| < LETRA: (< letra >)(< letra >|< digito >)*>
}




boolean command(StringBuffer sistema) :
	{	
		int x = 0;
		salida=new String();
		String[] nueva= new String[3];
		
	}
	
	{

		haceInput(x, salida, nueva) 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "po" { return true; }

		| <EOF> {return false;} 
	}

void haceInput(int x, String salida, String[] nueva):
{
  int p = 0;
  boolean bool;
  int q = 0;
  String busque = "";
  int sizee = 0;
  String cprespuesto = ")";
  String direcciones = "";
 }
{
  	
  	  <OP>
	(
   		<EQUALS> " " cambiarVariable(variables, valorvars)
   		| <RUN_DIRS><OP>":"{direcciones = token.image;}((<FRONT>|<RIGHT>|<LEFT>|<BACK>){direcciones= direcciones.concat(token.image);})
			      (" :"{direcciones= direcciones.concat(token.image);}(<FRONT>|<RIGHT>|<LEFT>|<BACK>){direcciones= direcciones.concat(token.image);
												})*
												{
												  for(int i=0;i<direcciones.length();i++ )
												  {
												    if(Character.toString(direcciones.charAt(i)).equals(":"))
												    {
												      if(Character.toString(direcciones.charAt(i+1)).equals("l"))
												      {
												        if(world.getFacing()==0)//north
														  {world.left();}
														  else if (world.getFacing()==1)//south
														  {world.right();}
														  else if (world.getFacing()==2)//east
														  {world.down();}
														  else if (world.getFacing()==3)//west
														  {world.up();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("f"))
												      {
												        if(world.getFacing()==0)
														  { world.up();}
														  else if (world.getFacing()==1)
														  {world.down();}
														  else if (world.getFacing()==2)
														  {world.right();}
														  else if (world.getFacing()==3)
														  {world.left();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("r"))
												      {
												        if(world.getFacing()==0)//north
														  {world.right();}
														  else if (world.getFacing()==1)//south
														  {world.left();}
														  else if (world.getFacing()==2)//east
														  {world.down();}
														  else if (world.getFacing()==3)//west
														  {world.up();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("b"))
												      {
												        if(world.getFacing()==0)//north
														  {world.down();}
														  else if (world.getFacing()==1)//south
														  {world.up();}
														  else if (world.getFacing()==2)//east
														  {world.left();}
														  else if (world.getFacing()==3)//west
														  {world.right();}
												      }
												    }
												  }
												}<CP>
		| <MOVE>" " x=checkNum(variables, valorvars) {world.moveForward(x);salida = "Command: Moveforward ";}
		| <SALTAR>
		| <TURN>" :"(<LEFT> { world.turnRight();world.turnRight();world.turnRight();}
					|<AROUND> { world.turnRight();world.turnRight();}
					|<RIGHT> { world.turnRight();}) 
		| <FACE>" :"(<SOUTH> {
		  						if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();world.turnRight();  
								}
								
									}
					|<WEST> { if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); world.turnRight();world.turnRight();  
								}
					   }
					|<EAST> { if(world.getFacing()==0)
								{
								 world.turnRight();
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();  
								} }
					|<NORTH> {  if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight(); 
								}}) 
		| <PUT>" :"
					 (<BALLOONS>" "x=checkNum(variables, valorvars){world.putBalloons(x);}
					  |<CHIPS>" "x=checkNum(variables, valorvars){world.putChips(x);})
		| <PICK>" :"(<BALLOONS>" "x=checkNum(variables, valorvars){world.grabBalloons(x);}
					  |<CHIPS>" "x=checkNum(variables, valorvars){world.pickChips(x);})
		| <MOVE_DIR>" "x=checkNum(variables, valorvars)" :"
					(<FRONT> {
					  if(world.getFacing()==0)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  }
					  else if (world.getFacing()==1)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down();}
					  }
					  else if (world.getFacing()==2)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  }
					  else if (world.getFacing()==3)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					   }
					|<RIGHT>{
					  
					  if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  } }
					|<LEFT>{
					 if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  }  }
					|<BACK>{
					  if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  } })
		| < PARALOOP >estoyenloop=condition() { if(!estoyenloop) { this.ReInit(new java.io.StringReader(")(skip))")); }}< CP>< OP>haceInputRecursion( x, salida, nueva)

		| <REPEAT > " "x=checkNum(variables, valorvars) " " { elreturn = "";}
					<OP> { acumuresto = "";}
					soloRevisaIf(x, salida, tempnombres, tempvalores)
					< CP> { System.out.println(elreturn);}
					< CP>
					{
					  if(!elreturn.equals(""))
			  		  { 
			  			acumuresto = "(";
			  			for(p=0; p<x;p++)
			  			{
			  			  acumuresto = acumuresto.concat("(");
			  			  acumuresto = acumuresto.concat(elreturn);
			  			  acumuresto = acumuresto.concat(")");
			  			}
			  			acumuresto = acumuresto.concat(")");
			  			elreturn="";
			  		  }
			  		}
			  		soloRevisaIf(x, salida, tempnombres, tempvalores)
					{
			  			if(!elreturn.equals(""))
			  			{ 
			  				acumuresto = acumuresto.concat("(");
			  				acumuresto = acumuresto.concat(elreturn);
			  				acumuresto = acumuresto.concat(")");
			  			}
			  			acumuresto = cprespuesto.concat(acumuresto);
			  			System.out.println(acumuresto);
			  			this.ReInit(new java.io.StringReader(acumuresto));
					}
			  		
		//| <RUN_DIRS>(<FRONT>|<RIGHT>|<LEFT>|<BACK>)+ //FALTA QUE VUELVA A POSCICION ORIGINAL
		| <MOVE_FACE>" "x=checkNum(variables, valorvars)" :"(<SOUTH> {
		  						if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.down(); }
									}
					|<WEST> { if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.left(); }
					   }
					|<EAST> { if(world.getFacing()==0)
								{
								 world.turnRight();
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.right(); }
							}
					|<NORTH> {  if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight(); 
								}
								for(int i=1;i<=x;i++)
					  			{ world.up(); }
								})
		| < RESETVAR> {
		  				sizee = tempnomdos.size();
		  				System.out.println("LEO EL TOKEN " );
		  				for(p=0; p<sizee; p++)
						{
						  System.out.println("ENTRO AL CICLO " );
						  busque = tempnomdos.get(p);
						  for(q=0; q<variables.size(); q++)
						  {
						    if(busque.equals(variables.get(q)))
						    {
						      dirbordos.add(p);
						      System.out.println("TOCA BORRAR LA VARIABLE "+variables.get(q));
						      dirborrar.add(q);
						      //variables.remove(q);
						      //valorvars.remove(q);
						      //tempnomdos.remove(p);
						    }
						  }
						}
						Collections.sort(dirborrar);
						Collections.sort(dirbordos);
						sizee = dirborrar.size();
						for(p=0; p<dirborrar.size(); p++)
						{
						  q = dirborrar.get(sizee-p-1);
						  System.out.println("TOCA BORRAR LA VARIABLE "+variables.get(q));
						  variables.remove(q);
						  System.out.println(valorvars.get(q));
						  valorvars.remove(q);
						}
						sizee = dirbordos.size();
						for(p=0; p<dirbordos.size(); p++)
						{
						  q = dirbordos.get(sizee-p-1);
						  tempnomdos.remove(q);
						}
		  				}
		| <DEFVAR> " " declararVariable(variables, valorvars) //{variables[Integer.parseInt(nueva[0])]=nueva[1];valorvars[Integer.parseInt(nueva[0])]=Integer.parseInt(nueva[2]);}
		| < DEFUN> " " cargarFuncion(tempnombres, tempvalores, nombrefuns, paramfuns, blockfuns)
		| (<IF> (bool=condition())(< CP>)
			(<OP> { elreturn=token.image; acumuresto = "";}
			soloRevisaIf(x, salida, tempnombres, tempvalores) {bloqueuno=elreturn.concat(")"); }
			< CP>{ elreturn="";}
			)
			(<OP> { elreturn=token.image;}
			soloRevisaIf(x, salida, tempnombres, tempvalores) {bloquedos=elreturn.concat(")"); }
			< CP>{ elreturn="";}
			)
			< CP>
			)
			soloRevisaIf(x, salida, tempnombres, tempvalores)
			{
			  if(!elreturn.equals(""))
			  { 
			  	acumuresto = "(";
			  	acumuresto = acumuresto.concat(elreturn);
			  	acumuresto = acumuresto.concat(")");
			  }
			  elreturn="";
			  if (bool)
			  {
			    bloqueuno = cprespuesto.concat(bloqueuno);
			    bloqueuno = bloqueuno.concat(acumuresto);
			    System.out.println(bloqueuno);
			    this.ReInit(new java.io.StringReader(bloqueuno));
			    bloqueuno = "";
			    bloquedos = "";
			    acumuresto = "";
			  }
			  else
			  {
			    bloquedos = cprespuesto.concat(bloquedos);
			    bloquedos = bloquedos.concat(acumuresto);
			    System.out.println(bloquedos);
			    this.ReInit(new java.io.StringReader(bloquedos));
			    bloqueuno = "";
			    bloquedos = "";
			    acumuresto = "";
			  }
			}
			| < LOOP > { elreturn = ""; backup= "";}estoyenloop=condition()
					{
					  if(elreturn == "")
					  {
					    condiloop = backup;
					  }
					  else
					  {
					    condiloop = elreturn;
					  }

					}
					< CP><OP > { elreturn=token.image;}
					soloRevisaIf(x, salida, tempnombres, tempvalores) { //elreturn=elreturn.concat(token.image);
																		elreturn=elreturn.concat(")");
					  													codeloop= elreturn;}
					<CP >{ elreturn="";}
					< CP>
					soloRevisaIf(x, salida, tempnombres, tempvalores) 
					{
					  acumuloop = elreturn;
					  elreturn="";
					  //codeloop=cprespuesto.concat(codeloop);
					  if(estoyenloop)
					  {
					    this.ReInit(new java.io.StringReader(cprespuesto));
					  }
					}
		| < OP> haceInputRecursion( x, salida, nueva)
		|buscarFuncion() 
		

	)
	
	
	<CP>
	{
	  if(estoyenloop)
	  {
	    armando = "(";
	    armando = armando.concat(paraloop);
	    armando = armando.concat(condiloop);
	    armando = armando.concat(")");
	    armando = armando.concat(codeloop);
	    //armando = armando.concat("(loop");
	    //armando = armando.concat(condiloop);
	    //armando = armando.concat(")");
	    //armando = armando.concat(codeloop);
	    //armando = armando.concat(")");
	    armando = armando.concat(")");
	    //armando = armando.concat(codeloop);
	    System.out.println(armando);
	    this.ReInit(new java.io.StringReader(armando));
	  }
	  else if(acumuloop!="")
	  {
	    this.ReInit(new java.io.StringReader(acumuloop));
	    acumuloop="";
	  }
	  else
	  { }
	}
}

void haceInputRecursion(int x, String salida, String[] nueva):
{
  int p = 0;
  boolean bool;
  int q = 0;
  String busque = "";
  int sizee = 0;
  String cprespuesto=")";
  String direcciones = "";
 }
{
  	
	(
   		<EQUALS> " " cambiarVariable(variables, valorvars)
   		| <RUN_DIRS><OP>":"{direcciones = token.image;}((<FRONT>|<RIGHT>|<LEFT>|<BACK>){direcciones= direcciones.concat(token.image);})
			      (" :"{direcciones= direcciones.concat(token.image);}(<FRONT>|<RIGHT>|<LEFT>|<BACK>){direcciones= direcciones.concat(token.image);
												})*
												{
												  for(int i=0;i<direcciones.length();i++ )
												  {
												    if(Character.toString(direcciones.charAt(i)).equals(":"))
												    {
												      if(Character.toString(direcciones.charAt(i+1)).equals("l"))
												      {
												        if(world.getFacing()==0)//north
														  {world.left();}
														  else if (world.getFacing()==1)//south
														  {world.right();}
														  else if (world.getFacing()==2)//east
														  {world.down();}
														  else if (world.getFacing()==3)//west
														  {world.up();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("f"))
												      {
												        if(world.getFacing()==0)
														  { world.up();}
														  else if (world.getFacing()==1)
														  {world.down();}
														  else if (world.getFacing()==2)
														  {world.right();}
														  else if (world.getFacing()==3)
														  {world.left();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("r"))
												      {
												        if(world.getFacing()==0)//north
														  {world.right();}
														  else if (world.getFacing()==1)//south
														  {world.left();}
														  else if (world.getFacing()==2)//east
														  {world.down();}
														  else if (world.getFacing()==3)//west
														  {world.up();}
												      }
												      else if(Character.toString(direcciones.charAt(i+1)).equals("b"))
												      {
												        if(world.getFacing()==0)//north
														  {world.down();}
														  else if (world.getFacing()==1)//south
														  {world.up();}
														  else if (world.getFacing()==2)//east
														  {world.left();}
														  else if (world.getFacing()==3)//west
														  {world.right();}
												      }
												    }
												  }
												}<CP>
		| <MOVE>" " x=checkNum(variables, valorvars) {world.moveForward(x);salida = "Command: Moveforward ";}
		| <SALTAR>
		| <TURN>" :"(<LEFT> { world.turnRight();world.turnRight();world.turnRight();}
					|<AROUND> { world.turnRight();world.turnRight();}
					|<RIGHT> { world.turnRight();}) 
		| <FACE>" :"(<SOUTH> {
		  						if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();world.turnRight();  
								}
								
									}
					|<WEST> { if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); world.turnRight();world.turnRight();  
								}
					   }
					|<EAST> { if(world.getFacing()==0)
								{
								 world.turnRight();
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();  
								} }
					|<NORTH> {  if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight(); 
								}}) 
		| <PUT>" :"
					 (<BALLOONS>" "x=checkNum(variables, valorvars){world.putBalloons(x);}
					  |<CHIPS>" "x=checkNum(variables, valorvars){world.putChips(x);})
		| <PICK>" :"(<BALLOONS>" "x=checkNum(variables, valorvars){world.grabBalloons(x);}
					  |<CHIPS>" "x=checkNum(variables, valorvars){world.pickChips(x);})
		| <MOVE_DIR>" "x=checkNum(variables, valorvars)" :"
					(<FRONT> {
					  if(world.getFacing()==0)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  }
					  else if (world.getFacing()==1)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down();}
					  }
					  else if (world.getFacing()==2)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  }
					  else if (world.getFacing()==3)
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					   }
					|<RIGHT>{
					  
					  if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  } }
					|<LEFT>{
					 if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up(); }
					  }  }
					|<BACK>{
					  if(world.getFacing()==0)//north
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.down(); }
					  }
					  else if (world.getFacing()==1)//south
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.up();}
					  }
					  else if (world.getFacing()==2)//east
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.left(); }
					  }
					  else if (world.getFacing()==3)//west
					  {
					    for(int i=1;i<=x;i++)
					  	{ world.right(); }
					  } })
		| < PARALOOP >estoyenloop=condition() { if(!estoyenloop) { this.ReInit(new java.io.StringReader(")(skip))")); }}< CP>< OP>haceInputRecursion( x, salida, nueva)

		| <REPEAT > " "x=checkNum(variables, valorvars) " " { elreturn = "";}
					<OP> { acumuresto = "";}
					soloRevisaIf(x, salida, tempnombres, tempvalores)
					< CP> { System.out.println(elreturn);}
					< CP>
					{
					  if(!elreturn.equals(""))
			  		  { 
			  			acumuresto = "(";
			  			for(p=0; p<x;p++)
			  			{
			  			  acumuresto = acumuresto.concat("(");
			  			  acumuresto = acumuresto.concat(elreturn);
			  			  acumuresto = acumuresto.concat(")");
			  			}
			  			acumuresto = acumuresto.concat(")");
			  			elreturn="";
			  		  }
			  		}
			  		soloRevisaIf(x, salida, tempnombres, tempvalores)
					{
			  			if(!elreturn.equals(""))
			  			{ 
			  				acumuresto = acumuresto.concat("(");
			  				acumuresto = acumuresto.concat(elreturn);
			  				acumuresto = acumuresto.concat(")");
			  			}
			  			acumuresto = cprespuesto.concat(acumuresto);
			  			System.out.println(acumuresto);
			  			this.ReInit(new java.io.StringReader(acumuresto));
					}
			  		
		//| <RUN_DIRS>(<FRONT>|<RIGHT>|<LEFT>|<BACK>)+ //FALTA QUE VUELVA A POSCICION ORIGINAL
		| <MOVE_FACE>" "x=checkNum(variables, valorvars)" :"(<SOUTH> {
		  						if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.down(); }
									}
					|<WEST> { if(world.getFacing()==0)
								{
								 world.turnRight();world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.left(); }
					   }
					|<EAST> { if(world.getFacing()==0)
								{
								 world.turnRight();
								}
								else if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight();world.turnRight();  
								}
								for(int i=1;i<=x;i++)
					  			{ world.right(); }
							}
					|<NORTH> {  if(world.getFacing()==1)
								{
								 world.turnRight();world.turnRight();
								}
								else if(world.getFacing()==2)
								{
								 world.turnRight();world.turnRight();world.turnRight(); 
								}
								else if(world.getFacing()==3)
								{
								 world.turnRight(); 
								}
								for(int i=1;i<=x;i++)
					  			{ world.up(); }
								})
		| < RESETVAR> {
		  				sizee = tempnomdos.size();
		  				for(p=0; p<sizee; p++)
						{
						  busque = tempnomdos.get(p);
						  for(q=0; q<variables.size(); q++)
						  {
						    if(busque.equals(variables.get(q)))
						    {
						      dirbordos.add(p);
						      dirborrar.add(q);
						      //variables.remove(q);
						      //valorvars.remove(q);
						      //tempnomdos.remove(p);
						    }
						  }
						}
						for(p=0; p<dirborrar.size(); p++)
						{
						  q = dirborrar.get(p);
						  variables.remove(q);
						  valorvars.remove(q);
						}
						for(p=0; p<dirbordos.size(); p++)
						{
						  q = dirborrar.get(p);
						  tempnomdos.remove(q);
						}
		  				}
		| <DEFVAR> " " declararVariable(variables, valorvars) //{variables[Integer.parseInt(nueva[0])]=nueva[1];valorvars[Integer.parseInt(nueva[0])]=Integer.parseInt(nueva[2]);}
		| < DEFUN> " " cargarFuncion(tempnombres, tempvalores, nombrefuns, paramfuns, blockfuns)
		| (<IF> (bool=condition())(< CP>)
			(<OP> { elreturn=token.image; acumuresto = "";}
			soloRevisaIf(x, salida, tempnombres, tempvalores) {bloqueuno=elreturn.concat(")"); }
			< CP>{ elreturn="";}
			)
			(<OP> { elreturn=token.image;}
			soloRevisaIf(x, salida, tempnombres, tempvalores) {bloquedos=elreturn.concat(")"); }
			< CP>{ elreturn="";}
			)
			< CP>
			)
			soloRevisaIf(x, salida, tempnombres, tempvalores)
			{
			  if(!elreturn.equals(""))
			  { 
			  	acumuresto = "(";
			  	acumuresto = acumuresto.concat(elreturn);
			  	acumuresto = acumuresto.concat(")");
			  	acumuresto = acumuresto.concat(")");
			  }
			  elreturn="";
			  if (bool)
			  {
			    bloqueuno = cprespuesto.concat(bloqueuno);
			    bloqueuno = bloqueuno.concat(acumuresto);
			    System.out.println(bloqueuno);
			    this.ReInit(new java.io.StringReader(bloqueuno));
			    bloqueuno = "";
			    bloquedos = "";
			    acumuresto = "";
			  }
			  else
			  {
			    bloquedos = cprespuesto.concat(bloquedos);
			    bloquedos = bloquedos.concat(acumuresto);
			    System.out.println(bloquedos);
			    this.ReInit(new java.io.StringReader(bloquedos));
			    bloqueuno = "";
			    bloquedos = "";
			    acumuresto = "";
			  }
			}
			| < LOOP > { elreturn = ""; backup= "";}estoyenloop=condition()
					{
					  if(elreturn == "")
					  {
					    condiloop = backup;
					  }
					  else
					  {
					    condiloop = elreturn;
					  }

					}
					< CP><OP > { elreturn=token.image;}
					soloRevisaIf(x, salida, tempnombres, tempvalores) { //elreturn=elreturn.concat(token.image);
																		elreturn=elreturn.concat(")");
					  													codeloop= elreturn;}
					<CP >{ elreturn="";}
					< CP>
					soloRevisaIf(x, salida, tempnombres, tempvalores) 
					{
					  acumuloop = elreturn;
					  elreturn="";
					  //codeloop=cprespuesto.concat(codeloop);
					  if(estoyenloop)
					  {
					    this.ReInit(new java.io.StringReader(cprespuesto));
					  }
					}
		| < OP> haceInputRecursion( x, salida, nueva)
		|buscarFuncion() 
		

	)
	
	
	<CP>
	[< OP>haceInputRecursion( x, salida, nueva)]
    
}
void buscarFuncion():
{
  int x=0;
  int y=0;
  boolean cheker=false;
  int indexxx= 0;
  String elnombre = "";
  String elsupernombre = "";
  int elnumero = 0;
  String input = "";
  String cpp= ")";
  
}
{
  (
    (< LETRA >{ elsupernombre=elsupernombre.concat(token.image);})(< LETRA >{ elsupernombre=elsupernombre.concat(token.image);}|< DIGITO >{ elsupernombre=elsupernombre.concat(token.image);})*
  
  )
  {
    try 
			{
			  	for(x=0; x<nombrefuns.size(); x++)
    			{
      				if(elsupernombre.equals(nombrefuns.get(x)))
      				{
      				  cheker=true;
      				  indexxx= x;
      				  input = blockfuns.get(x);
      				  try 
						{
						  	tempnombres = new ArrayList<String>();
							tempvalores = new ArrayList<Integer>();
							String[] tempvarss= paramfuns.get(indexxx).split(" ");
							System.out.println(tempvarss.length);
			  				for(y=0; y<tempvarss.length; y++)
			  				{
			  				  tempnombres.add(tempvarss[y]);
			  				  tempnomdos.add(tempvarss[y]);
			  				  tempvalores.add(-1);
			  				 }
			  				 if(paramfuns.get(indexxx).equals(""))
			  				 {
			  				   tempnombres.remove(0);
			  				   tempnomdos.remove(tempnomdos.size()-1);
			  				   tempvalores.remove(0);
			  				 }
						} 
					catch (NumberFormatException ee) 
						{
							// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
							// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
							throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
						}

      				}
     			}
     			if(!cheker)
     			{
     			  
     			  throw new Error("NO ENCONTRE ESA FUNCION... PAILA ");

     			}
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
  }
  [" "
  (
    < NUMERO>
    {
      if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
      
    
	}  )
  (
    " "
    < NUMERO>
    { 
    if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
	}  )*]
  < CP >
  {
    if(tempnombres.size() >0)
    {
      throw new Error("FALTARON VARIABLE POR DEFINIR PARA USAR LA FUNCION");
    }
    input = cpp.concat(input);
    //System.out.println(input);
    elreturn = "";
  }
  soloRevisaIf(x, salida, variables, valorvars) 
  {
    if(!elreturn.equals(""))
			  { 
			  	acumuresto = "(";
			  	acumuresto = acumuresto.concat(elreturn);
			  	acumuresto = acumuresto.concat(")");
			  	if(!paramfuns.get(indexxx).equals(""))
			  	{
			  	  input = input.concat("(!!!)");
			  	}
			  	//input = input.concat("(!!!)");
    			input = input.concat(acumuresto);
			  }
    System.out.println("EL NUEVO INPUT ES:   "+input);
    
    this.ReInit(new java.io.StringReader(input));
    //this.ReInit(new java.io.StringReader(elreturn));
  }
  
  
}



void soloRevisaIf(int x, String salida, ArrayList<String> tempnombres, ArrayList<Integer> tempvalores):
{
  int p = 0;
  boolean bool;
  //String elretur = "";
  String amedias = "";
 		
 }
{
  		(  		  <EQUALS>{ elreturn=elreturn.concat(token.image);} " "{ elreturn=elreturn.concat(token.image);} cambiarVariable(tempnombres, tempvalores)
		| <MOVE>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);} x=checkNum(tempnombres, tempvalores)
		| <SALTAR>{ elreturn=elreturn.concat(token.image);}
		| <TURN>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<LEFT>|<AROUND>|<RIGHT>){elreturn=elreturn.concat(token.image);} 
		| <FACE>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<SOUTH>|<WEST>|<EAST>|<NORTH>){ elreturn=elreturn.concat(token.image);}
		| <PUT>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<BALLOONS>|<CHIPS>) { elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);} x=checkNum(tempnombres, tempvalores)
		| <PICK>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<BALLOONS>|<CHIPS>){ elreturn=elreturn.concat(token.image);} " "{ elreturn=elreturn.concat(token.image);} x=checkNum(tempnombres, tempvalores)
		| <MOVE_DIR>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);} x=checkNum(tempnombres, tempvalores)" :"{ elreturn=elreturn.concat(token.image);}  (<FRONT>|<RIGHT>|<LEFT>|<BACK>){ elreturn=elreturn.concat(token.image);}
		| <RUN_DIRS>{ elreturn=elreturn.concat(token.image);}< OP>{ elreturn=elreturn.concat(token.image);}":"{ elreturn=elreturn.concat(token.image);}(<FRONT>{ elreturn=elreturn.concat(token.image);}|<RIGHT>{ elreturn=elreturn.concat(token.image);}|<LEFT>{ elreturn=elreturn.concat(token.image);}|<BACK>{ elreturn=elreturn.concat(token.image);})(" :"{ elreturn=elreturn.concat(token.image);}(<FRONT>{ elreturn=elreturn.concat(token.image);}|<RIGHT>{ elreturn=elreturn.concat(token.image);}|<LEFT>{ elreturn=elreturn.concat(token.image);}|<BACK>{ elreturn=elreturn.concat(token.image);}))*< CP>{ elreturn=elreturn.concat(token.image);} 
		| <MOVE_FACE> { elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(tempnombres, valorvars)" :"{ elreturn=elreturn.concat(token.image);} (<SOUTH>|<WEST>|<EAST>|<NORTH>){ elreturn=elreturn.concat(token.image);}
		| <DEFVAR> { elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);} declararVariable(tempnombres, valorvars) { elreturn=elreturn.concat(token.image);}//{variables[Integer.parseInt(nueva[0])]=nueva[1];valorvars[Integer.parseInt(nueva[0])]=Integer.parseInt(nueva[2]);}
		| <IF>{ elreturn=elreturn.concat(token.image);}conditionRevi()< CP >{ elreturn=elreturn.concat(token.image);}//[< CP>{ elreturn=elreturn.concat(token.image);}]
		| < CAN_MOVE_P > { elreturn=elreturn.concat(token.image);} " :"{ elreturn=elreturn.concat(token.image);}(<SOUTH>|<WEST>|<EAST>|<NORTH>){ elreturn=elreturn.concat(token.image);}
		| < FACING_P >  { elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<SOUTH>|<WEST>|<EAST>|<NORTH>){ elreturn=elreturn.concat(token.image);}
		| <CAN_PUT_P>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}(<BALLOONS>|< CHIPS >){ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(tempnombres, tempvalores)
		| < NOT > { elreturn=elreturn.concat(token.image);}bool=condition()< CP >{ elreturn=elreturn.concat(token.image);}
		| < EOF>
		| (< OP>{ elreturn=elreturn.concat(token.image);}(soloRevisaIf(x, salida, tempnombres, tempvalores))< CP >{ elreturn=elreturn.concat(token.image);})+
		| chequearFuncion()
		)
	
	  //[< OP>{ elreturn=elreturn.concat(token.image);}
	  //soloRevisaIfRecursion(x, salida, tempnombres, tempvalores)]
}

void chequearFuncion():
{
  String elsupernombre = "";
  int indexxx = 0;
  boolean cheker =false;
  int x = 0;
  int tamanio = 0;
  String momenparams = "";
}
{
  (
    (< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})(< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);}|< DIGITO >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})*
  
  )
  {
    for(x=0; x<nombrefuns.size(); x++)
    {
    	if(elsupernombre.equals(nombrefuns.get(x)))
    	{
    	  cheker=true;
    	  indexxx= x;
      	}
   }
   if(!cheker)
   {
     throw new Error("NO ENCONTRE ESA FUNCION... PAILA ");

   }
  }
  [" " { elreturn=elreturn.concat(token.image);}
  < NUMERO> { elreturn=elreturn.concat(token.image); momenparams= momenparams.concat(token.image);}
  (
    " " { elreturn=elreturn.concat(token.image); momenparams= momenparams.concat(token.image);}
    < NUMERO> { elreturn=elreturn.concat(token.image); momenparams= momenparams.concat(token.image);}  )*
  ]
  {
    String[] tempvarsss= paramfuns.get(indexxx).split(" ");
    //System.out.println(tempvarsss.length);
    String[] confirmo= momenparams.split(" ");
    //System.out.println(confirmo.length);
    if(tempvarsss.length!=confirmo.length)
    {
      throw new Error("LA CANTIDAD DE PARAMETROS NO COINCIDE CON LA ESPERADA");
    }
  }
}

void cargarFuncion(ArrayList<String> tempnombres, ArrayList<Integer> tempvalores, ArrayList<String> nombrefuns, ArrayList<String> paramfuns, ArrayList<String> blockfuns) :
{
  String parametros = "";
  String agregastr = "";
  int agregaint = 0;
  int x = 0;
  String salida = "";
  String elrelleno = "";
  String elrenombre = "";
  String lavaria = "";
}
{
  (    //< NAME>|< LETRA>
    (< LETRA >{ elrenombre=elrenombre.concat(token.image);})(< LETRA >{ elrenombre=elrenombre.concat(token.image);}|< DIGITO >{ elrenombre=elrenombre.concat(token.image);})*
  )
  {
    try 
			{
			  	nombrefuns.add(elrenombre);
			  	System.out.println(elrenombre);
				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
  }
  " "
  < OP>
  [(
    //< NAME>|< LETRA>
    (< LETRA >{ lavaria=lavaria.concat(token.image);})(< LETRA >{ lavaria=lavaria.concat(token.image);}|< DIGITO >{ lavaria=lavaria.concat(token.image);})*
  )
  {
    
  	try 
			{
			  	tempnombres.add(lavaria);
				tempvalores.add(4);
				parametros = parametros.concat(lavaria);
				
				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
	}
  (
    " "
    (
    //< NAME>|< LETRA>
    (< LETRA > { lavaria=token.image;})(< LETRA >{ lavaria=lavaria.concat(token.image);}|< DIGITO >{ lavaria=lavaria.concat(token.image);})*
  	)
    {
    
  		try 
			{
			  	tempnombres.add(lavaria);
				tempvalores.add(4);
				parametros = parametros.concat(" ");
				parametros = parametros.concat(lavaria);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
	}  )*]
  < CP>
  {
    for(x=0; x<variables.size(); x++)
    {
      agregastr = variables.get(x);
      agregaint = valorvars.get(x);
      tempnombres.add(agregastr);
	  tempvalores.add(agregaint);
     }
     elreturn = "";
     paramfuns.add(parametros);
  }
  < OP > { elreturn = token.image;}
  soloRevisaIf(x,salida,tempnombres, tempvalores)
  < CP>
  {
    elreturn = elreturn.concat(token.image);
    System.out.println(parametros);
    blockfuns.add(elreturn);
    System.out.println(elreturn);
    
  }
  
}



	int numero() throws Error:
	{
	  
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}


	




boolean condition ():

{
  int x=0;
  boolean bool;
  int posx=0;
  int posy=0;
  int newpos=0;
  boolean paranot=false;
  boolean parafuncion=false;
}
{
	<OP>{ elreturn=elreturn.concat(token.image);}

	(  		<FACING_P>{ elreturn=elreturn.concat(token.image);}
  				" :"{ elreturn=elreturn.concat(token.image);}
  				(bool=facing_p(){if (bool){return true;}else{return false;}})
		| <CAN_PUT_P>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}
					(<BALLOONS>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(variables, valorvars)
							{
					  			if(world.getMyBalloons() >= x)
					  			{
					  			  return true;
					  			}
					  			else
					  			{
					  			  return false;
					  			}
							}
					|<CHIPS>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(variables, valorvars)
							{
					  		if(world.getMyChips() >= x && world.freeSpacesForChips() >= x)
					  		{
					  		  return true;
					  		}
					  		else
					  		{
					  		  return false;
					 		 }
							})
		| <CAN_MOVE_P>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<SOUTH>
					{
					  elreturn=elreturn.concat(token.image);
					  posx = (int)world.getPosition().getX();
					  posy=(int)world.getPosition().getY();
					  newpos = posy+1;
					  //System.out.println(newpos);
					  if(newpos<1)
					  {
					    return false;
					  }
					  if(newpos >8)
					  {
					    return false;
					  }
					  if(!world.blockedInRange(posx,posy,newpos,1))
					  {
					    return true;
					  }
					   else
					  {
					    return false;
					  }
					}
				    |<WEST>
				    {
				      elreturn=elreturn.concat(token.image);
				      posx = (int)world.getPosition().getX();
					  posy=(int)world.getPosition().getY();
					  newpos = posx-1;
					  if(newpos<1)
					  {
					    return false;
					  }
					  if(newpos >8)
					  {
					    return false;
					  }
					  if(!world.blockedInRange(posx,posy,newpos,3))
					  {
					    return true;
					  }
					   else
					  {
					    return false;
					  }
					}
					
					|<EAST>
					{
					  elreturn=elreturn.concat(token.image);
					  posx = (int)world.getPosition().getX();
					  posy=(int)world.getPosition().getY();
					  newpos = posx+1;
					  if(newpos<1)
					  {
					    return false;
					  }
					  if(newpos >8)
					  {
					    return false;
					  }
					  if(!world.blockedInRange(posx,posy,newpos,2))
					  {
					    return true;
					  }
					   else
					  {
					    return false;
					  }
					}
					
					|<NORTH>
				    {
				      elreturn=elreturn.concat(token.image);
					  posx = (int)world.getPosition().getX();
					  posy=(int)world.getPosition().getY();
					  newpos = posy-1;
					  if(newpos<1)
					  {
					    return false;
					  }
					  if(newpos >8)
					  {
					    return false;
					  }
					  if(!world.blockedInRange(posx,posy,newpos,0))
					  {
					    return true;
					  }
					   else
					  {
					    return false;
					  }
				    }
					)


	| <NOT>{ elreturn=elreturn.concat(token.image);} paranot=condition() < CP>{
								elreturn=elreturn.concat(token.image);
	  							if(paranot)
	  							{
	  							  return false;
	  							}
	  							else
	  							{
	  							  return true;
	  							}
	  							}
	  							
	| parafuncion=buscarFuncionIf() { return parafuncion;}


)
 
}

void conditionRevi ():

{
  int x=0;
  boolean bool;
  int posx=0;
  int posy=0;
  int newpos=0;
  boolean paranot=false;
  boolean parafuncion=false;
}
{
	<OP>{ elreturn=elreturn.concat(token.image);}

	(
  		<FACING_P>{ elreturn=elreturn.concat(token.image);}
  				" :"{ elreturn=elreturn.concat(token.image);}
  				(bool=facing_p())
		| <CAN_PUT_P>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}
					(<BALLOONS>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(variables, valorvars)
					|<CHIPS>{ elreturn=elreturn.concat(token.image);}" "{ elreturn=elreturn.concat(token.image);}x=checkNum(variables, valorvars))
		| <CAN_MOVE_P>{ elreturn=elreturn.concat(token.image);}" :"{ elreturn=elreturn.concat(token.image);}(<SOUTH>
					{
					  elreturn=elreturn.concat(token.image);
					}
				    |<WEST>
				    {
				      elreturn=elreturn.concat(token.image);
					}
					
					|<EAST>
					{
					  elreturn=elreturn.concat(token.image);
					}
					
					|<NORTH>
				    {
				      elreturn=elreturn.concat(token.image);
				    }
					)


	| <NOT>{ elreturn=elreturn.concat(token.image);} paranot=condition() < CP>{
								elreturn=elreturn.concat(token.image);
	  							}
	  							
	| revisarFuncionIf() 


)
}

 boolean facing_p():
{
  int x=1;
  boolean bool;
}
{
 
  (<SOUTH>
  { elreturn=elreturn.concat(token.image);
    if (world.facingSouth())
	  {

	    bool=true;
	    return bool;
	    
	  }
	else
	{
		 bool=false;
	    return bool;
	}
  }
| <WEST>
	{elreturn=elreturn.concat(token.image);
	  if (world.facingWest())
		  {
		     bool=true;
	         return bool;
		  }
		else
		{
			 bool=false;
	    	return bool;
		}
	  }
|<EAST>
	{elreturn=elreturn.concat(token.image);
	  if (world.facingEast())
		  {
		     bool=true;
	         return bool;
		  }
		else
		{
			 bool=false;
	    	return bool;
		}
	  }
| <NORTH>

	{elreturn=elreturn.concat(token.image);
	  if (world.facingNorth())
		  {
		    bool=true;
	         return bool;
		  }
	 else
	 {
		 bool=false;
	    return bool;
     }
	 }
)

}

void cambiarVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) :
{
  int pos=-40;
  int i = 0;
  String pru = "";
  String lavaria = "";
}
{
  (    //<NAME>|< LETRA>
    (< LETRA >{elreturn= elreturn.concat(token.image); lavaria= lavaria.concat(token.image);})(< LETRA >{ elreturn=elreturn.concat(token.image); lavaria= lavaria.concat(token.image);}|< DIGITO >{ elreturn=elreturn.concat(token.image); lavaria= lavaria.concat(token.image);})*
  )
  {
    for(i=0; i<variables.size(); i++)
  	{
  	  pru = variables.get(i);
  	  if (pru!=null)
  	  { 
    	if(lavaria.equals(pru))
    	{
    	  variables.remove(i);
    	  valorvars.remove(i);
    	  variables.add(lavaria);
    	  pos = i;
    	}
  	  }
  	}
  	if(pos==-40)
  	{
  	  throw new Error("ERROR: NO EXISTE LA VARIABLE");

  	}
  	
  }
  " "{ elreturn=elreturn.concat(token.image);}
  <NUMERO>
  {
    valorvars.add(Integer.parseInt(token.image));
    elreturn=elreturn.concat(token.image);
  }

}

int checkNum(ArrayList<String> variables, ArrayList<Integer> valorvars) :
{
  int rta = -57;
  int i = 0;
  String lavariable = "";
}
{
  (
    //< NAME>
    (< LETRA >{ elreturn=elreturn.concat(token.image); lavariable=lavariable.concat(token.image);})(< LETRA >{ elreturn=elreturn.concat(token.image);  lavariable=lavariable.concat(token.image);}|< DIGITO >{ elreturn=elreturn.concat(token.image);  lavariable=lavariable.concat(token.image);})*
  {
    
  
  	for(i=0; i<variables.size(); i++)
  	{
    	if(lavariable.equals(variables.get(i)))
    	{
    	  rta= valorvars.get(i);

    	}
  	}
  	if(rta == -57)
  	{
  	  throw new Error("ERROR: NO EXISTE LA VARIABLE" + lavariable);

  	}
  	return rta;
  }
	|  < NUMERO>
	{
	  rta=Integer.parseInt(token.image);
	  elreturn=elreturn.concat(token.image);
	  return rta; 
	}
	)
}




void declararVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) :
	{
	  String nombre = "";
	  int total = 1;
	  int pos = 0;
	  int j = 0;
	  int k = 0;
	  String lavariab = "";
	  boolean yaesta = false;
	  
	}
	{
	  (	    //< NAME>|< LETRA>
	    (< LETRA >{ elreturn=elreturn.concat(token.image); lavariab=lavariab.concat(token.image);})(< LETRA >{ elreturn=elreturn.concat(token.image); lavariab=lavariab.concat(token.image);}|< DIGITO >{ elreturn=elreturn.concat(token.image); lavariab=lavariab.concat(token.image);})*
	  )
	  {
	    try 
			{
			  	variables.add(lavariab);
				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}

	  }
	  " "
	  <NUMERO>
		{
			try 
			{
			  total = Integer.parseInt(token.image);
			  valorvars.add(total);
			  

				
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			
			
		}
	}
boolean buscarFuncionIf():
{
  int x=0;
  int y=0;
  int z=0;
  boolean cheker=false;
  int indexxx= 0;
  String elnombre = "";
  String elsupernombre = "";
  int elnumero = 0;
  String input = "";
  String cpp= ")";
  
}
{
  (
    (< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})(< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);}|< DIGITO >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})*
  
  )
  {
    try 
			{
			  	for(x=0; x<nombrefuns.size(); x++)
    			{
      				if(elsupernombre.equals(nombrefuns.get(x)))
      				{
      				  cheker=true;
      				  indexxx= x;
      				  input = blockfuns.get(x);
      				  try 
						{
						  	tempnombres = new ArrayList<String>();
							tempvalores = new ArrayList<Integer>();
							String[] tempvarss= paramfuns.get(indexxx).split(" ");
							System.out.println(tempvarss.length);
			  				for(y=0; y<tempvarss.length; y++)
			  				{
			  				  tempnombres.add(tempvarss[y]);
			  				  tempnomdos.add(tempvarss[y]);
			  				  tempvalores.add(-1);
			  				 }
			  				 if(paramfuns.get(indexxx).equals(""))
			  				 {
			  				   tempnombres.remove(0);
			  				   tempnomdos.remove(tempnomdos.size()-1);
			  				   tempvalores.remove(0);
			  				 }
						} 
					catch (NumberFormatException ee) 
						{
							// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
							// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
							throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
						}

      				}
     			}
     			if(!cheker)
     			{
     			  
     			  throw new Error("NO ENCONTRE ESA FUNCION... PAILA ");

     			}
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
  }
  [" " { elreturn=elreturn.concat(token.image);}
  (
    < NUMERO> { elreturn=elreturn.concat(token.image);}
    {
      if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
      
    
	}
  )
  (
    " " { elreturn=elreturn.concat(token.image);}
    < NUMERO>
    {
      elreturn=elreturn.concat(token.image);
      backup= elreturn;
    if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
	}
  )*]
  < CP >
  {
    if(tempnombres.size() >0)
    {
      throw new Error("FALTARON VARIABLE POR DEFINIR PARA USAR LA FUNCION");
    }
    //input = nuevotoken.concat(input);

    //input = input.concat(cpp);
    
    //System.out.println(input);
    elreturn = "";
  }
  [<CP >]
  < OP> { elreturn=elreturn.concat(token.image);}
  soloRevisaIf(x, salida, tempnombres, tempvalores)
  < CP> { elreturn=elreturn.concat(token.image); blouno = elreturn; elreturn = "";System.out.println("EL PRIMER BLOQUE ES:   "+blouno);}
  < OP> { elreturn=elreturn.concat(token.image);}
  soloRevisaIf(x, salida, tempnombres, tempvalores)
  < CP> { elreturn=elreturn.concat(token.image); blodos = elreturn; elreturn = "";System.out.println("EL SEGUNDO BLOQUE ES:   "+blodos);}
  < CP>
  soloRevisaIf(x, salida, variables, valorvars)
  {
    if(!elreturn.equals(""))
			  { 
			  	acumuresto = "";
			  	acumuresto = acumuresto.concat(blouno);
			  	acumuresto = acumuresto.concat(blodos);
			  	acumuresto = acumuresto.concat(")");
			  	input = input.concat(acumuresto);
			  	//acumuresto = acumuresto.concat(elreturn);
			  	if(!paramfuns.get(indexxx).equals(""))
			  	{
			  	  input = input.concat("(!!!)");
			  	}
			  	//input = input.concat("(!!!)");
			  	
			  	//for(z=0;z<variables.size();z++)
			  	//{
			  	  //input = input.concat("(defvar ");
			  	  //input = input.concat(variables.get(z));
			  	  //input = input.concat(" ");
			  	  //input = input.concat(Integer.toString(valorvars.get(z)));
			  	  //input = input.concat(")");
			  	//}
			  	input = input.concat("(skip)");
    			input = input.concat(elreturn);
			  }
    System.out.println("EL NUEVO INPUT ES:   "+input);
    
    this.ReInit(new java.io.StringReader(input));
    elreturn = "";
    //this.ReInit(new java.io.StringReader(elreturn));
  }
  pruebaif=condition() { return pruebaif;}
  
}

boolean revisarFuncionIf():
{
  int x=0;
  int y=0;
  int z=0;
  boolean cheker=false;
  int indexxx= 0;
  String elnombre = "";
  String elsupernombre = "";
  int elnumero = 0;
  String input = "";
  String cpp= ")";
  
}
{
  (
    (< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})(< LETRA >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);}|< DIGITO >{ elsupernombre=elsupernombre.concat(token.image); elreturn=elreturn.concat(token.image);})*
  
  )
  {
    try 
			{
			  	for(x=0; x<nombrefuns.size(); x++)
    			{
      				if(elsupernombre.equals(nombrefuns.get(x)))
      				{
      				  cheker=true;
      				  indexxx= x;
      				  input = blockfuns.get(x);
      				  try 
						{
						  	tempnombres = new ArrayList<String>();
							tempvalores = new ArrayList<Integer>();
							String[] tempvarss= paramfuns.get(indexxx).split(" ");
							System.out.println(tempvarss.length);
			  				for(y=0; y<tempvarss.length; y++)
			  				{
			  				  tempnombres.add(tempvarss[y]);
			  				  tempnomdos.add(tempvarss[y]);
			  				  tempvalores.add(-1);
			  				 }
			  				 if(paramfuns.get(indexxx).equals(""))
			  				 {
			  				   tempnombres.remove(0);
			  				   tempnomdos.remove(tempnomdos.size()-1);
			  				   tempvalores.remove(0);
			  				 }
						} 
					catch (NumberFormatException ee) 
						{
							// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
							// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
							throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
						}

      				}
     			}
     			if(!cheker)
     			{
     			  
     			  throw new Error("NO ENCONTRE ESA FUNCION... PAILA ");

     			}
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");
			}
  }
  [" " { elreturn=elreturn.concat(token.image);}
  (
    < NUMERO> { elreturn=elreturn.concat(token.image);}
    {
      if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
      
    
	}
  )
  (
    " " { elreturn=elreturn.concat(token.image);}
    < NUMERO>
    {
      elreturn=elreturn.concat(token.image);
      backup= elreturn;
    if(tempnombres.get(0)!=null) { 
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        throw new Error("NO HAY SUFICIENTES VARIABLES");
      }
	}
  )*]
  < CP >
  {
    if(tempnombres.size() >0)
    {
      throw new Error("FALTARON VARIABLE POR DEFINIR PARA USAR LA FUNCION");
    }
    //input = nuevotoken.concat(input);

    //input = input.concat(cpp);
    
    //System.out.println(input);
    elreturn = "";
  }
  [<CP >]
  < OP> { elreturn=elreturn.concat(token.image);}
  soloRevisaIf(x, salida, variables, valorvars)
  < CP> { elreturn=elreturn.concat(token.image); blouno = elreturn; elreturn = "";System.out.println("EL PRIMER BLOQUE ES:   "+blouno);}
  < OP> { elreturn=elreturn.concat(token.image);}
  soloRevisaIf(x, salida, variables, valorvars)
  < CP> { elreturn=elreturn.concat(token.image); blodos = elreturn; elreturn = "";System.out.println("EL SEGUNDO BLOQUE ES:   "+blodos);}
  < CP>
  soloRevisaIf(x, salida, variables, valorvars)
  {
    if(!elreturn.equals(""))
			  { 
			  	acumuresto = "";
			  	acumuresto = acumuresto.concat(blouno);
			  	acumuresto = acumuresto.concat(blodos);
			  	acumuresto = acumuresto.concat(")");
			  	input = input.concat(acumuresto);
			  	//acumuresto = acumuresto.concat(elreturn);
			  	if(!paramfuns.get(indexxx).equals(""))
			  	{
			  	  input = input.concat("(!!!)");
			  	}
			  	//input = input.concat("(!!!)");
			  	
			  	//for(z=0;z<variables.size();z++)
			  	//{
			  	  //input = input.concat("(defvar ");
			  	  //input = input.concat(variables.get(z));
			  	  //input = input.concat(" ");
			  	  //input = input.concat(Integer.toString(valorvars.get(z)));
			  	  //input = input.concat(")");
			  	//}
			  	input = input.concat("(skip)");
    			input = input.concat(elreturn);
			  }
    System.out.println("EL NUEVO INPUT ES:   "+input);
    
    this.ReInit(new java.io.StringReader(input));
    elreturn = "";
    //this.ReInit(new java.io.StringReader(elreturn));
  }
  conditionRevi()
  
}

