/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;
        private ArrayList<String> variables = new ArrayList<String>();
        private ArrayList<Integer> valorvars = new ArrayList<Integer>();


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

  final public boolean command(StringBuffer sistema) throws ParseException {
                int x = 0;
                salida=new String();
                String[] nueva= new String[3];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      instructions(x, salida, nueva);
                  //  try {
                //		 Thread.sleep(1);
                  //   } catch (InterruptedException e) {
                        //	        System.err.format("IOException: %s%n", e);
                        //	    }

                        sistema.append(salida);
                        {if (true) return true;}
      break;
    case 43:
      jj_consume_token(43);
               {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                         {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void instructions(int x, String salida, String[] nueva) throws ParseException {
  int p = 0;
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      jj_consume_token(44);
      cambiarVariable(variables, valorvars);
      break;
    case MOVE:
      jj_consume_token(MOVE);
      jj_consume_token(44);
      x = checkNum(variables, valorvars);
      break;
    case TURN:
      jj_consume_token(TURN);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case FACE:
      jj_consume_token(FACE);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PUT:
      jj_consume_token(PUT);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = checkNum(variables, valorvars);
      break;
    case PICK:
      jj_consume_token(PICK);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = checkNum(variables, valorvars);
      break;
    case MOVE_DIR:
      jj_consume_token(MOVE_DIR);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RUN_DIRS:
      jj_consume_token(RUN_DIRS);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
        case LEFT:
        case BACK:
        case FRONT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
      }
      break;
    case MOVE_FACE:
      jj_consume_token(MOVE_FACE);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DEFVAR:
      jj_consume_token(DEFVAR);
      jj_consume_token(44);
      declararVariable(variables, valorvars);
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
  }

  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void condition() throws ParseException {
  int x=0;
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING_P:
      jj_consume_token(FACING_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CAN_PUT_P:
      jj_consume_token(CAN_PUT_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = checkNum(variables, valorvars);
      break;
    case CAN_PICK_P:
      jj_consume_token(CAN_PICK_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = checkNum(variables, valorvars);
      break;
    case CAN_MOVE_P:
      jj_consume_token(CAN_MOVE_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      condition();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
  }

  final public void cambiarVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
  int pos=-40;
  int i = 0;
  String pru = "";
    jj_consume_token(NAME);
    for(i=0; i<variables.size(); i++)
        {
          pru = variables.get(i);
          if (pru!=null)
          {
        if(token.image.equals(pru))
        {
          variables.remove(i);
          valorvars.remove(i);
          variables.add(token.image);
          pos = i;
        }
          }
        }
        if(pos==-40)
        {
          {if (true) throw new Error("ERROR: NO EXISTE LA VARIABLE");}

        }
    jj_consume_token(44);
    jj_consume_token(NUMERO);
    valorvars.add(Integer.parseInt(token.image));
  }

  final public int checkNum(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
  int rta = -57;
  int i = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      jj_consume_token(NAME);
        for(i=0; i<variables.size(); i++)
        {
        if(token.image.equals(variables.get(i)))
        {
          rta= valorvars.get(i);

        }
        }
        if(rta == -57)
        {
          {if (true) throw new Error("ERROR: NO EXISTE LA VARIABLE");}

        }
        {if (true) return rta;}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
          rta=Integer.parseInt(token.image);
          {if (true) return rta;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void declararVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
          String nombre = "";
          int total = 1;
          int pos = 0;
          int j = 0;
          int k = 0;
    jj_consume_token(NAME);
            try
                        {
                                variables.add(token.image);

                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    jj_consume_token(44);
    jj_consume_token(NUMERO);
                        try
                        {
                          total = Integer.parseInt(token.image);
                          valorvars.add(total);



                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000001,0x80000000,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0x80000000,0x0,0xff68,0x0,0x60000000,0x60000000,0x0,0xf80000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x3,0xf0,0x0,0x0,0xd,0xd,0xd,0xf0,0x0,0xf0,0x0,0x0,0xf0,0x0,0x400,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
