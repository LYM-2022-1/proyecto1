/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.awt.Point;
//import control.Interpreter;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;
        private RobotWorld world2;
        //private Interpreter recursividad = new Interpreter();
        private ArrayList<String> variables = new ArrayList<String>();
        private ArrayList<Integer> valorvars = new ArrayList<Integer>();
        private ArrayList<String> tempnombres = new ArrayList<String>();
        private ArrayList<Integer> tempvalores = new ArrayList<Integer>();
        private ArrayList<String> blockfuns = new ArrayList<String>();
        private ArrayList<String> nombrefuns = new ArrayList<String>();
        private ArrayList<String> paramfuns = new ArrayList<String>();
        private ArrayList<String> tempnomdos = new ArrayList<String>();
        private String bloqueuno = "";
        private String bloquedos = "";
        private String elreturn = "";
        private String acumuresto = "";
        private int cuentaif = -1;
        void setWorld(RobotWorldDec w) {
                world = (RobotWorldDec) w;
        }
        /*void setWorld2(RobotWorld w2) {
		world2 = (RobotWorld) w2;	
	}*/


        String salida=new String();

  final public boolean command(StringBuffer sistema) throws ParseException {
                int x = 0;
                salida=new String();
                String[] nueva= new String[3];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      haceInput(x, salida, nueva);
                  //  try {
                //		 Thread.sleep(1);
                  //   } catch (InterruptedException e) {
                        //	        System.err.format("IOException: %s%n", e);
                        //	    }

                        sistema.append(salida);
                        {if (true) return true;}
      break;
    case 43:
      jj_consume_token(43);
               {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                         {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void haceInput(int x, String salida, String[] nueva) throws ParseException {
  int p = 0;
  boolean bool;
  int q = 0;
  String busque = "";
  int sizee = 0;
  String cprespuesto = ")";
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      jj_consume_token(44);
      cambiarVariable(variables, valorvars);
      break;
    case MOVE:
      jj_consume_token(MOVE);
      jj_consume_token(44);
      x = checkNum(variables, valorvars);
                                                              world.moveHorizontally(x);salida = "Command: Moveforward ";
                                                                                                                //this.ReInit(new java.io.StringReader(input));

      break;
    case SALTAR:
      jj_consume_token(SALTAR);
      break;
    case TURN:
      jj_consume_token(TURN);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case FACE:
      jj_consume_token(FACE);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PUT:
      jj_consume_token(PUT);
      jj_consume_token(46);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                        world.putBalloons(x);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                      world.putChips(x);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PICK:
      jj_consume_token(PICK);
      jj_consume_token(46);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                          world.grabBalloons(x);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                      world.pickChips(x);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case MOVE_DIR:
      jj_consume_token(MOVE_DIR);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(44);
      x = checkNum(variables, valorvars);
      jj_consume_token(44);
                                                                      elreturn = "";
      soloRevisa(x, salida, tempnombres, tempvalores);
      break;
    case RUN_DIRS:
      jj_consume_token(RUN_DIRS);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
        case LEFT:
        case BACK:
        case FRONT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
      }
      break;
    case MOVE_FACE:
      jj_consume_token(MOVE_FACE);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RESETVAR:
      jj_consume_token(RESETVAR);
                                                sizee = tempnomdos.size();
                                                for(p=0; p<tempnomdos.size(); p++)
                                                {
                                                  busque = tempnomdos.get(q);
                                                  for(q=0; q<variables.size(); q++)
                                                  {
                                                    if(busque.equals(variables.get(q)))
                                                    {
                                                      variables.remove(q);
                                                      valorvars.remove(q);
                                                      tempnomdos.remove(p);
                                                    }
                                                  }
                                                }
      break;
    case DEFVAR:
      jj_consume_token(DEFVAR);
      jj_consume_token(44);
      declararVariable(variables, valorvars);
      break;
    case DEFUN:
      jj_consume_token(DEFUN);
      jj_consume_token(44);
      cargarFuncion(tempnombres, tempvalores, nombrefuns, paramfuns, blockfuns);
      break;
    case IF:
      jj_consume_token(IF);
      bool = condition();
      jj_consume_token(CP);
      jj_consume_token(OP);
                                elreturn=""; acumuresto = "";
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                                                                           bloqueuno=elreturn;
      jj_consume_token(CP);
                               elreturn="";
      jj_consume_token(OP);
                                elreturn="";
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                                                                           bloquedos=elreturn;
      jj_consume_token(CP);
                               elreturn="";
      jj_consume_token(CP);
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                          acumuresto = elreturn;
                          elreturn="";
                          if (bool)
                          {
                            bloqueuno = cprespuesto.concat(bloqueuno);
                            bloqueuno = bloqueuno.concat(acumuresto);
                            System.out.println(bloqueuno);
                            this.ReInit(new java.io.StringReader(bloqueuno));
                            bloqueuno = "";
                            bloquedos = "";
                            acumuresto = "";
                          }
                          else
                          {
                            bloquedos = cprespuesto.concat(bloquedos);
                            bloquedos = bloquedos.concat(acumuresto);
                            System.out.println(bloquedos);
                            this.ReInit(new java.io.StringReader(bloquedos));
                            bloqueuno = "";
                            bloquedos = "";
                            acumuresto = "";
                          }
      break;
    case OP:
      jj_consume_token(OP);
      haceInputRecursion(x, salida, nueva);
      break;
    case LETRA:
      buscarFuncion();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
  }

  final public void haceInputRecursion(int x, String salida, String[] nueva) throws ParseException {
  int p = 0;
  boolean bool;
  int q = 0;
  String busque = "";
  int sizee = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      jj_consume_token(44);
      cambiarVariable(variables, valorvars);
      break;
    case MOVE:
      jj_consume_token(MOVE);
      jj_consume_token(44);
      x = checkNum(variables, valorvars);
                                                              world.moveHorizontally(x);salida = "Command: Moveforward ";
                                                                                                                //this.ReInit(new java.io.StringReader(input));

      break;
    case SALTAR:
      jj_consume_token(SALTAR);
      break;
    case TURN:
      jj_consume_token(TURN);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case FACE:
      jj_consume_token(FACE);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PUT:
      jj_consume_token(PUT);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                        world.putBalloons(x);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                      world.putChips(x);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PICK:
      jj_consume_token(PICK);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                           world.grabBalloons(x);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                                      world.pickChips(x);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case MOVE_DIR:
      jj_consume_token(MOVE_DIR);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RUN_DIRS:
      jj_consume_token(RUN_DIRS);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
        case LEFT:
        case BACK:
        case FRONT:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_2;
        }
      }
      break;
    case MOVE_FACE:
      jj_consume_token(MOVE_FACE);
      x = checkNum(variables, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RESETVAR:
      jj_consume_token(RESETVAR);
                                                sizee = tempnomdos.size();
                                                for(p=0; p<tempnomdos.size(); p++)
                                                {
                                                  busque = tempnomdos.get(q);
                                                  for(q=0; q<variables.size(); q++)
                                                  {
                                                    if(busque.equals(variables.get(q)))
                                                    {
                                                      variables.remove(q);
                                                      valorvars.remove(q);
                                                      tempnomdos.remove(p);
                                                    }
                                                  }
                                                }
      break;
    case DEFVAR:
      jj_consume_token(DEFVAR);
      jj_consume_token(44);
      declararVariable(variables, valorvars);
      break;
    case DEFUN:
      jj_consume_token(DEFUN);
      jj_consume_token(44);
      cargarFuncion(tempnombres, tempvalores, nombrefuns, paramfuns, blockfuns);
      break;
    case IF:
      jj_consume_token(IF);
      bool = condition();
      jj_consume_token(OP);
                                elreturn=""; acumuresto = "";
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                                                                           bloqueuno=elreturn;
      jj_consume_token(CP);
                               elreturn="";
      jj_consume_token(OP);
                                elreturn="";
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                                                                           bloquedos=elreturn;
      jj_consume_token(CP);
                               elreturn="";
      soloRevisaIf(x, salida, tempnombres, tempvalores);
                          acumuresto = elreturn;
                          elreturn="";
                          if (bool)
                          {
                            bloqueuno = bloqueuno.concat(acumuresto);
                            this.ReInit(new java.io.StringReader(bloqueuno));
                            bloqueuno = "";
                            bloquedos = "";
                            acumuresto = "";
                          }
                          else
                          {
                            bloquedos = bloquedos.concat(acumuresto);
                            this.ReInit(new java.io.StringReader(bloquedos));
                            bloqueuno = "";
                            bloquedos = "";
                            acumuresto = "";
                          }
      break;
    case OP:
      jj_consume_token(OP);
      haceInputRecursion(x, salida, nueva);
      break;
    case LETRA:
      buscarFuncion();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      jj_consume_token(OP);
      haceInputRecursion(x, salida, nueva);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void buscarFuncion() throws ParseException {
  int x=0;
  int y=0;
  boolean cheker=false;
  int indexxx= 0;
  String elnombre = "";
  String elsupernombre = "";
  int elnumero = 0;
  String input = "";
  String cpp= ")";
    jj_consume_token(LETRA);
                elsupernombre=elsupernombre.concat(token.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
      case DIGITO:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
        jj_consume_token(LETRA);
                                                                              elsupernombre=elsupernombre.concat(token.image);
        break;
      case DIGITO:
        jj_consume_token(DIGITO);
                                                                                                                                            elsupernombre=elsupernombre.concat(token.image);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    try
                        {
                                for(x=0; x<nombrefuns.size(); x++)
                        {
                                if(elsupernombre.equals(nombrefuns.get(x)))
                                {
                                  cheker=true;
                                  indexxx= x;
                                  input = blockfuns.get(x);
                                  try
                                                {
                                                        tempnombres = new ArrayList<String>();
                                                        tempvalores = new ArrayList<Integer>();
                                                        String[] tempvarss= paramfuns.get(indexxx).split(" ");
                                                        for(y=0; y<tempvarss.length; y++)
                                                        {
                                                          tempnombres.add(tempvarss[y]);
                                                          tempnomdos.add(tempvarss[y]);
                                                          tempvalores.add(-1);
                                                         }
                                                }
                                        catch (NumberFormatException ee)
                                                {
                                                        // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                                        // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                                        {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                                                }

                                }
                        }
                        if(!cheker)
                        {

                          {if (true) throw new Error("NO ENCONTRE ESA FUNCION... PAILA ");}

                        }
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    jj_consume_token(44);
    jj_consume_token(NUMERO);
      if(tempnombres.get(0)!=null) {
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        {if (true) throw new Error("NO HAY SUFICIENTES VARIABLES");}
      }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_4;
      }
      jj_consume_token(44);
      jj_consume_token(NUMERO);
    if(tempnombres.get(0)!=null) {
        elnombre = tempnombres.get(0);
        elnumero = Integer.parseInt(token.image);
        tempnombres.remove(0);
        variables.add(elnombre);
        valorvars.add(elnumero);
      }
      else
      {
        {if (true) throw new Error("NO HAY SUFICIENTES VARIABLES");}
      }
    }
    jj_consume_token(CP);
    input = cpp.concat(input);
    //System.out.println(input);
    elreturn = "";
    soloRevisa(x, salida, tempnombres, tempvalores);
    //input = input.concat(elreturn);
    acumuresto = elreturn;
    input = input.concat("(!!!)");
    input = input.concat(acumuresto);
    System.out.println(input);

    this.ReInit(new java.io.StringReader(input));
    //this.ReInit(new java.io.StringReader(elreturn));

  }

  final public void soloRevisa(int x, String salida, ArrayList<String> tempnombres, ArrayList<Integer> tempvalores) throws ParseException {
  int p = 0;
  boolean bool;
  //String elretur = "";
  String amedias = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
                   elreturn="";
      break;
    case OP:
      jj_consume_token(OP);
                 elreturn=elreturn.concat(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                       elreturn=elreturn.concat(token.image);
        cambiarVariable(tempnombres, tempvalores);
        break;
      case SALTAR:
        jj_consume_token(SALTAR);
                            elreturn=elreturn.concat(token.image);
        break;
      case MOVE:
        jj_consume_token(MOVE);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                      elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case TURN:
        jj_consume_token(TURN);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case AROUND:
          jj_consume_token(AROUND);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                       elreturn=elreturn.concat(token.image);
        break;
      case FACE:
        jj_consume_token(FACE);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        case NORTH:
          jj_consume_token(NORTH);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                              elreturn=elreturn.concat(token.image);
        break;
      case PUT:
        jj_consume_token(PUT);
                         elreturn=elreturn.concat(token.image);
        jj_consume_token(45);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                    elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case PICK:
        jj_consume_token(PICK);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(45);
                                                                       elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                    elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                                                                                                                                 elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case MOVE_DIR:
        jj_consume_token(MOVE_DIR);
                              elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                            elreturn=elreturn.concat(token.image);
        break;
      case RUN_DIRS:
        jj_consume_token(RUN_DIRS);
                              elreturn=elreturn.concat(token.image);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FRONT:
            jj_consume_token(FRONT);
                                                                               elreturn=elreturn.concat(token.image);
            break;
          case RIGHT:
            jj_consume_token(RIGHT);
                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          case LEFT:
            jj_consume_token(LEFT);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          case BACK:
            jj_consume_token(BACK);
                                                                                                                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT:
          case LEFT:
          case BACK:
          case FRONT:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_5;
          }
        }
        break;
      case MOVE_FACE:
        jj_consume_token(MOVE_FACE);
                                elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, valorvars);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        case NORTH:
          jj_consume_token(NORTH);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                           elreturn=elreturn.concat(token.image);
        break;
      case DEFVAR:
        jj_consume_token(DEFVAR);
                             elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                         elreturn=elreturn.concat(token.image);
        declararVariable(tempnombres, valorvars);
                                                                                                                                                            elreturn=elreturn.concat(token.image);
        break;
      case IF:
        jj_consume_token(IF);
                        elreturn=elreturn.concat(token.image);
        bool = condition();
        break;
      case 0:
      case OP:
        label_6:
        while (true) {
          soloRevisa(x, salida, tempnombres, tempvalores);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
          case OP:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_6;
          }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CP);
                elreturn=elreturn.concat(token.image);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void soloRevisaIf(int x, String salida, ArrayList<String> tempnombres, ArrayList<Integer> tempvalores) throws ParseException {
  int p = 0;
  boolean bool;
  //String elretur = "";
  String amedias = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
                   elreturn ="";
      break;
    case OP:
      jj_consume_token(OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                            elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                         elreturn=elreturn.concat(token.image);
        cambiarVariable(tempnombres, tempvalores);
        break;
      case MOVE:
        jj_consume_token(MOVE);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                      elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case SALTAR:
        jj_consume_token(SALTAR);
                            elreturn=elreturn.concat(token.image);
        break;
      case TURN:
        jj_consume_token(TURN);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case AROUND:
          jj_consume_token(AROUND);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                       elreturn=elreturn.concat(token.image);
        break;
      case FACE:
        jj_consume_token(FACE);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        case NORTH:
          jj_consume_token(NORTH);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                              elreturn=elreturn.concat(token.image);
        break;
      case PUT:
        jj_consume_token(PUT);
                         elreturn=elreturn.concat(token.image);
        jj_consume_token(45);
                                                                      elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                    elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case PICK:
        jj_consume_token(PICK);
                          elreturn=elreturn.concat(token.image);
        jj_consume_token(45);
                                                                       elreturn=elreturn.concat(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                    elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                                                                                                                                 elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        break;
      case MOVE_DIR:
        jj_consume_token(MOVE_DIR);
                              elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, tempvalores);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                            elreturn=elreturn.concat(token.image);
        break;
      case RUN_DIRS:
        jj_consume_token(RUN_DIRS);
                              elreturn=elreturn.concat(token.image);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FRONT:
            jj_consume_token(FRONT);
                                                                               elreturn=elreturn.concat(token.image);
            break;
          case RIGHT:
            jj_consume_token(RIGHT);
                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          case LEFT:
            jj_consume_token(LEFT);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          case BACK:
            jj_consume_token(BACK);
                                                                                                                                                                                                                                elreturn=elreturn.concat(token.image);
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT:
          case LEFT:
          case BACK:
          case FRONT:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_7;
          }
        }
        break;
      case MOVE_FACE:
        jj_consume_token(MOVE_FACE);
                                elreturn=elreturn.concat(token.image);
        x = checkNum(tempnombres, valorvars);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        case NORTH:
          jj_consume_token(NORTH);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                                                                           elreturn=elreturn.concat(token.image);
        break;
      case DEFVAR:
        jj_consume_token(DEFVAR);
                             elreturn=elreturn.concat(token.image);
        jj_consume_token(44);
                                                                         elreturn=elreturn.concat(token.image);
        declararVariable(tempnombres, valorvars);
                                                                                                                                                            elreturn=elreturn.concat(token.image);
        break;
      case IF:
        jj_consume_token(IF);
                        elreturn=elreturn.concat(token.image);
        bool = condition();
        break;
      case 0:
      case OP:
        label_8:
        while (true) {
          soloRevisaIf(x, salida, tempnombres, tempvalores);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
          case OP:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_8;
          }
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
                elreturn=elreturn.concat(token.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      jj_consume_token(OP);
                  elreturn=elreturn.concat(token.image);
      soloRevisaIfRecursion(x, salida, tempnombres, tempvalores);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final public void soloRevisaIfRecursion(int x, String salida, ArrayList<String> tempnombres, ArrayList<Integer> tempvalores) throws ParseException {
  int p = 0;
  boolean bool;
  //String elretur = "";
  String amedias = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
                          elreturn=elreturn.concat(token.image);
      jj_consume_token(44);
                                                                       elreturn=elreturn.concat(token.image);
      cambiarVariable(tempnombres, tempvalores);
      break;
    case MOVE:
      jj_consume_token(MOVE);
                          elreturn=elreturn.concat(token.image);
      jj_consume_token(44);
                                                                      elreturn=elreturn.concat(token.image);
      x = checkNum(tempnombres, tempvalores);
      break;
    case SALTAR:
      jj_consume_token(SALTAR);
                            elreturn=elreturn.concat(token.image);
      break;
    case TURN:
      jj_consume_token(TURN);
                          elreturn=elreturn.concat(token.image);
      jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                       elreturn=elreturn.concat(token.image);
      break;
    case FACE:
      jj_consume_token(FACE);
                          elreturn=elreturn.concat(token.image);
      jj_consume_token(46);
                                                                      elreturn=elreturn.concat(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                              elreturn=elreturn.concat(token.image);
      break;
    case PUT:
      jj_consume_token(PUT);
                         elreturn=elreturn.concat(token.image);
      jj_consume_token(45);
                                                                      elreturn=elreturn.concat(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                    elreturn=elreturn.concat(token.image);
      jj_consume_token(44);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
      x = checkNum(tempnombres, tempvalores);
      break;
    case PICK:
      jj_consume_token(PICK);
                          elreturn=elreturn.concat(token.image);
      jj_consume_token(45);
                                                                       elreturn=elreturn.concat(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                    elreturn=elreturn.concat(token.image);
      jj_consume_token(44);
                                                                                                                                                                                 elreturn=elreturn.concat(token.image);
      x = checkNum(tempnombres, tempvalores);
      break;
    case MOVE_DIR:
      jj_consume_token(MOVE_DIR);
                              elreturn=elreturn.concat(token.image);
      x = checkNum(tempnombres, tempvalores);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                            elreturn=elreturn.concat(token.image);
      break;
    case RUN_DIRS:
      jj_consume_token(RUN_DIRS);
                              elreturn=elreturn.concat(token.image);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FRONT:
          jj_consume_token(FRONT);
                                                                               elreturn=elreturn.concat(token.image);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
                                                                                                                                elreturn=elreturn.concat(token.image);
          break;
        case LEFT:
          jj_consume_token(LEFT);
                                                                                                                                                                                elreturn=elreturn.concat(token.image);
          break;
        case BACK:
          jj_consume_token(BACK);
                                                                                                                                                                                                                                elreturn=elreturn.concat(token.image);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
        case LEFT:
        case BACK:
        case FRONT:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_9;
        }
      }
      break;
    case MOVE_FACE:
      jj_consume_token(MOVE_FACE);
                                elreturn=elreturn.concat(token.image);
      x = checkNum(tempnombres, valorvars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case NORTH:
        jj_consume_token(NORTH);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                           elreturn=elreturn.concat(token.image);
      break;
    case DEFVAR:
      jj_consume_token(DEFVAR);
                             elreturn=elreturn.concat(token.image);
      jj_consume_token(44);
                                                                         elreturn=elreturn.concat(token.image);
      declararVariable(tempnombres, valorvars);
                                                                                                                                                            elreturn=elreturn.concat(token.image);
      break;
    case IF:
      jj_consume_token(IF);
                        elreturn=elreturn.concat(token.image);
      bool = condition();
      break;
    case 0:
    case OP:
      label_10:
      while (true) {
        soloRevisa(x, salida, tempnombres, tempvalores);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case OP:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_10;
        }
      }
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
                elreturn=elreturn.concat(token.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      jj_consume_token(OP);
                  elreturn=elreturn.concat(token.image);
      soloRevisaIfRecursion(x, salida, tempnombres, tempvalores);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  }

  final public void cargarFuncion(ArrayList<String> tempnombres, ArrayList<Integer> tempvalores, ArrayList<String> nombrefuns, ArrayList<String> paramfuns, ArrayList<String> blockfuns) throws ParseException {
  String parametros = "";
  String agregastr = "";
  int agregaint = 0;
  int x = 0;
  String salida = "";
  String elrelleno = "";
  String elrenombre = "";
    jj_consume_token(LETRA);
                elrenombre=elrenombre.concat(token.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
      case DIGITO:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
        jj_consume_token(LETRA);
                                                                        elrenombre=elrenombre.concat(token.image);
        break;
      case DIGITO:
        jj_consume_token(DIGITO);
                                                                                                                                elrenombre=elrenombre.concat(token.image);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    try
                        {
                                nombrefuns.add(elrenombre);
                                System.out.println(elrenombre);

                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    jj_consume_token(44);
    jj_consume_token(OP);
    jj_consume_token(LETRA);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
      case DIGITO:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
        jj_consume_token(LETRA);
        break;
      case DIGITO:
        jj_consume_token(DIGITO);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        try
                        {
                                tempnombres.add(token.image);
                                tempvalores.add(4);
                                parametros = parametros.concat(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_13;
      }
      jj_consume_token(44);
      jj_consume_token(LETRA);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA:
        case DIGITO:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA:
          jj_consume_token(LETRA);
          break;
        case DIGITO:
          jj_consume_token(DIGITO);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                try
                        {
                                tempnombres.add(token.image);
                                tempvalores.add(4);
                                parametros = parametros.concat(" ");
                                parametros = parametros.concat(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    }
    jj_consume_token(CP);
    for(x=0; x<variables.size(); x++)
    {
      agregastr = variables.get(x);
      agregaint = valorvars.get(x);
      tempnombres.add(agregastr);
          tempvalores.add(agregaint);
     }
     elreturn = "";
    soloRevisa(x,salida,tempnombres, tempvalores);
    //blockfuns
    paramfuns.add(parametros);
    System.out.println(parametros);
    blockfuns.add(elreturn);
    System.out.println(elreturn);
  }

  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public boolean condition() throws ParseException {
  int x=0;
  boolean bool;
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING_P:
      jj_consume_token(FACING_P);
                            elreturn=elreturn.concat(token.image);
      jj_consume_token(47);
                                       elreturn=elreturn.concat(token.image);
      bool = facing_p();
                                                 if (bool){{if (true) return true;}}else{{if (true) return false;}}
      break;
    case CAN_PUT_P:
      jj_consume_token(CAN_PUT_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                                if(world.getMyBalloons() >= x)
                                                                {
                                                                  {if (true) return true;}
                                                                }
                                                                else
                                                                {
                                                                  {if (true) return false;}
                                                                }
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        jj_consume_token(44);
        x = checkNum(variables, valorvars);
                                                        if(world.getMyChips() >= x && world.freeSpacesForChips() >= x)
                                                        {
                                                          {if (true) return true;}
                                                        }
                                                        else
                                                        {
                                                          {if (true) return false;}
                                                         }
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CAN_MOVE_P:
      jj_consume_token(CAN_MOVE_P);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOUTH:
        jj_consume_token(SOUTH);
                                          //String posx= String.valueOf(world.getPosition().getX());
                                         // String posy= String.valueOf(world.getPosition().getY()-1);


                                          //if(world.isBlocked(new Point(Integer.parseInt(posx),Integer.parseInt(posy))))
                                          int posx = (int)world.getPosition().getX();
                                          int posy=(int)world.getPosition().getY();
                                          if(world.blockedInRange(posx,posy,-1,1))
                                          {
                                            {if (true) return true;}
                                          }
                                           else
                                          {
                                            {if (true) return false;}
                                          }
        break;
      case NORTH:
        jj_consume_token(NORTH);
                                          //posx= String.valueOf(world.getPosition().getX());
                                     // posy= String.valueOf(world.getPosition().getY()+1);
                                          //if(world.isBlocked(new Point(Integer.parseInt(posx),Integer.parseInt(posy))))
                                          posx = (int)world.getPosition().getX();
                                          posy=(int)world.getPosition().getY();
                                          if(world.blockedInRange(posx,posy,1,0))
                                          {
                                            {if (true) return true;}
                                          }
                                           else
                                          {
                                            {if (true) return false;}
                                          }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean facing_p() throws ParseException {
  int x=1;
  boolean bool;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOUTH:
      jj_consume_token(SOUTH);
    elreturn=elreturn.concat(token.image);
    if (world.facingSouth())
          {

            bool=true;
            {if (true) return bool;}

          }
        else
        {
                 bool=false;
            {if (true) return bool;}
        }
      break;
    case WEST:
      jj_consume_token(WEST);
         elreturn=elreturn.concat(token.image);
          if (world.facingWest())
                  {
                     bool=true;
                 {if (true) return bool;}
                  }
                else
                {
                         bool=false;
                {if (true) return bool;}
                }
      break;
    case EAST:
      jj_consume_token(EAST);
         elreturn=elreturn.concat(token.image);
          if (world.facingEast())
                  {
                     bool=true;
                 {if (true) return bool;}
                  }
                else
                {
                         bool=false;
                {if (true) return bool;}
                }
      break;
    case NORTH:
      jj_consume_token(NORTH);
         elreturn=elreturn.concat(token.image);
          if (world.facingNorth())
                  {
                    bool=true;
                 {if (true) return bool;}
                  }
         else
         {
                 bool=false;
            {if (true) return bool;}
     }
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void cambiarVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
  int pos=-40;
  int i = 0;
  String pru = "";
    jj_consume_token(LETRA);
               elreturn= elreturn.concat(token.image);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
      case DIGITO:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
        jj_consume_token(LETRA);
                                                                    elreturn=elreturn.concat(token.image);
        break;
      case DIGITO:
        jj_consume_token(DIGITO);
                                                                                                                        elreturn=elreturn.concat(token.image);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    for(i=0; i<variables.size(); i++)
        {
          pru = variables.get(i);
          if (pru!=null)
          {
        if(token.image.equals(pru))
        {
          variables.remove(i);
          valorvars.remove(i);
          variables.add(token.image);
          pos = i;
        }
          }
        }
        if(pos==-40)
        {
          {if (true) throw new Error("ERROR: NO EXISTE LA VARIABLE");}

        }
    jj_consume_token(44);
       elreturn=elreturn.concat(token.image);
    jj_consume_token(NUMERO);
    valorvars.add(Integer.parseInt(token.image));
    elreturn=elreturn.concat(token.image);
  }

  final public int checkNum(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
  int rta = -57;
  int i = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LETRA:
      jj_consume_token(LETRA);
                elreturn=elreturn.concat(token.image);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA:
        case DIGITO:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA:
          jj_consume_token(LETRA);
                                                                    elreturn=elreturn.concat(token.image);
          break;
        case DIGITO:
          jj_consume_token(DIGITO);
                                                                                                                        elreturn=elreturn.concat(token.image);
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        for(i=0; i<variables.size(); i++)
        {
        if(token.image.equals(variables.get(i)))
        {
          rta= valorvars.get(i);

        }
        }
        if(rta == -57)
        {
          {if (true) throw new Error("ERROR: NO EXISTE LA VARIABLE");}

        }
        {if (true) return rta;}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
          rta=Integer.parseInt(token.image);
          elreturn=elreturn.concat(token.image);
          {if (true) return rta;}
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void declararVariable(ArrayList<String> variables, ArrayList<Integer> valorvars) throws ParseException {
          String nombre = "";
          int total = 1;
          int pos = 0;
          int j = 0;
          int k = 0;
    jj_consume_token(LETRA);
                        elreturn=elreturn.concat(token.image);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
      case DIGITO:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA:
        jj_consume_token(LETRA);
                                                                            elreturn=elreturn.concat(token.image);
        break;
      case DIGITO:
        jj_consume_token(DIGITO);
                                                                                                                                elreturn=elreturn.concat(token.image);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            try
                        {
                                variables.add(token.image);

                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("NO PUDE METER EN EL ARRAY ESTO: "+token.image+"!!");}
                        }
    jj_consume_token(44);
    jj_consume_token(NUMERO);
                        try
                        {
                          total = Integer.parseInt(token.image);
                          valorvars.add(total);



                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[75];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000001,0xc0000000,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc0000000,0x0,0xd06ffd0,0xc0000000,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc0000000,0x0,0xd04ffd0,0x1000000,0x0,0x0,0x0,0xc0000000,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x1000001,0x900ffd1,0x1000001,0xc0000000,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x1000001,0x900ffd1,0x1000001,0x1000000,0xc0000000,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x1000001,0x900ffd1,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x0,0x580000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x1,0x78,0x0,0x0,0x6,0x6,0x6,0x78,0x200,0x1,0x78,0x0,0x0,0x6,0x6,0x6,0x78,0x200,0x0,0x600,0x600,0x1000,0x1,0x78,0x0,0x0,0x6,0x6,0x6,0x78,0x0,0x0,0x0,0x1,0x78,0x0,0x0,0x6,0x6,0x6,0x78,0x0,0x0,0x0,0x0,0x1,0x78,0x0,0x0,0x6,0x6,0x6,0x78,0x0,0x0,0x0,0x600,0x600,0x600,0x600,0x1000,0x600,0x600,0x0,0x18,0x0,0x78,0x600,0x600,0x600,0x600,0x280,0x600,0x600,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 75; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
